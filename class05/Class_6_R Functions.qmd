---
title: "Class 06: R Functions"
author: "Alexander Ko: A17576411"
format: pdf
---
#All about functions in R
Functions are the way we get stuff done in R. We call a function to read data, compute stufdf, plot stuff, etc.

R makes writing functions accessible but we should always start by trying to get a working snippet of code first before we write our function

##Today's lab

We will grade a whole class of student assignments. We will always try to start with a simplified version of the problem
```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
#If we want the average we can use the `mean` function
mean(student1)
```
Let's be nice instructors and drop the lowest score so the answer is 100.

We can use the `min()` function to find the lowest value
```{r}
min(student1)

```
I found the `which.min` function that may be useful here. How does it work?
```{r}
which.min(student1)
```
I can use the minus syntax trick to get everything but the min value
```{r}
student1[which.min(student1)]
student1[-which.min(student1)]
```

```{r}
mean(student1[-which.min(student1)])
```
I have my first working snippet of code


Let's test on the other students

```{r}
student2
mean(student2[-which.min(student2)])
```

where is the problem??
```{r}
mean(student2)
```
Where is the problem? It's with the NA result
```{r}
mean(student2, trim=0, na.rm=TRUE)
```
```{r}
student3
```

```{r}
mean(student3, na.rm=TRUE)
```
No bueno! We need to fix 

I want to stop working with `student1, student2, student3` and typing it out every time, let's instead work with an input called `x`
```{r}
x <- student2
x
```

We want to overwrite the NA values with zero - if you miss a homework assignment, you score zero.

Google and Claude told me about the `is.na` function. Let's see how it works.

```{r}
is.na(x)
x[is.na(x)] <- 0
```
We can use logicals to index a vector
```{r}
mean(x[-which.min(x)])
```
```{r}
x <- student1
mean(x[-which.min(x)])
```
This is my working snippet of code that solves my example
```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```
Q1.Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score.If a student misses a homework(i.e.has an NA value)this can be used as a score to be potentially dropped.Yourfinalfunctionshouldbe adquatelyexplainedwithcodecommentsandbeabletoworkonanexampleclassgradebook suchasthisoneinCSVformat:“https://tinyurl.com/gradeinput”[3pts]

```{r}
grade <- function(x) {
x[is.na(x)] <- 0
mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```
We need to read the gradebook
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput",row.names=1)
gradebook

```
I can user the `apply()` function if I figure out how to use the damn thing
1 is rows and 2 is columns
```{r}
apply(gradebook,1,grade)
answer <- apply(gradebook,1,grade)
```
```{r}
answer
```

Q2.Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?[3pts]
```{r}
which.max(answer)
```

Q2: the top scoring student was student18, with a 94.50

Q3: we need to find which hw assignment has the lowest score
```{r}
apply(gradebook,2,grade)
answer2 <- apply(gradebook,2,grade)
```
```{r}
which.min(answer2)
```

q3: the lowest score was on hw2


