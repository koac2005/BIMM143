---
title: "Class 13"
author: "A17576411"
format: pdf
---
The data for this handson session comes from a published RNA seq experiment where airway smooth muscle cells were treated with dexamethasone (dex).
```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```
```{r}
nrow(counts)
#View(metadata)
table(metadata$dex)
sum(metadata$dex == "control")
```
>Q1. How many genes are in this dataset? 
A: 38694

>Q2. How many ‘control’ cell lines do we have? 
A: 4

Toy Differential Gene Expression
Let's start by calculating the mean counts per gene in the "control" samples. We can then compare this value for each gene to the mean counts in the "treated" samples (i.e. columns)

-Step 1: Find which columns in `counts` correspond to "control" samples.
-Step 2: Calculate the mean value per gene in these columns
- Step 3: Store my answer for later in `control.mean`

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/sum(metadata$dex == "control") 
head(control.mean)
```
>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

A: To make this code more robust, we could instead of dividing by four to get the control.mean (since in this case, this only works because we have four control samples), we could divide by sum(metadata$dex == "control"), which would account for the issue of calculating the mean out if we add more samples (since we would divide by the correct number of control samples instead of just by 4 every single time).

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)
A: 

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ ,treated$id]
treated.mean <- rowSums( treated.counts )/4 
head(treated.mean)
```
```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```
>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

A: geom_point()
```{r}
library(ggplot2)

ggplot(meancounts) + aes(meancounts[,1], meancounts [,2])  + geom_point(alpha=0.2)
```


>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

A: the log() argument allows me to do this

```{r}
plot(meancounts[,1],meancounts[,2], log = "xy", xlab="Control", ylab="Treated")
```

#Log transformations are super useful when our data is skewed and measured over a wide range like this. We can use different log transformations like base10 or natural logs but we most often prefer log2 units.

```{r}
log2(10/10)
```
What if there was a doubling?
```{r}
log2(10/20)
```
```{r}
log2(40/10)
```


```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```
```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```
The `!` mark flips the TRUE values to FALSE and vice versa

```{r}
x <- c(TRUE, FALSE, TRUE)
!x
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

A: The purpose of this argument is to remove any results where either the first or second column = 0, as this will result in strange log2fc results that will get in the way of our work. The unique function removes any duplicate results, so if a result has a 0 in both columns, it will not be counted twice.

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

A: 250

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

A: 367

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
sum(up.ind == "TRUE")
sum(down.ind == "TRUE")
```
>Q10. Do you trust these results? Why or why not?

A: We have not yet done a check for whether or not the results are statistically significant so I don't yet trust these results.


#But we forgot all about statistical significance of these differences...
We will use the DESeq2 package to do this analysis properly

#Using DESeq2

Like any package we must load it up with a `library` call first.

```{r}
library(DESeq2)
citation("DESeq2")
```

Set up the input object required by DESeq
```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```
Now we can run our DESeq analysis
```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```
```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```
```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```
```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```
```{r}
#results(dds)
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
```
```{r}
head(as.data.frame(res))
View(res)
summary(res)
```
```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
columns(org.Hs.eg.db)
```
Our current IDs are here:
```{r}
head(row.names(res))
```
These are in ENSEMBLE format and I want them as "SYMBOL" ids.
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL", # format of our genenames
                     column="SYMBOL", # new format we want to add
                     multiVals="first")
head(res)
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```
```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```
```{r}
write.csv(res[ord,], "deseq_results.csv")
```

Volcano plot. This is a common type of summary figure that jeeps both our inner biologist and inner stats nerd happy because it shows both P values and Log2 (Fold-Changes)

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="red", lty=2)
abline(h=-log(0.05), col="blue", lty=2)
```
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```
```{r}
#BiocManager::install("EnhancedVolcano")

library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```
## Wer will use ther **gage** package along with the **pathview** here to do  geneset enrichment (aka pathway analysis) and figure generatuib respectively

#Let's look at the first two pathways in KEGG
```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
#What we need for `gage()` is our genes in ENTREZ id format with a measure of their importance

It wants a vector of e.g. fold changes
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
Add entrez ids as `names()` to my `foldchanges()` vector

Now we can run `gage()` with this input vector and the genset we want to examine for overlap/enrichment...

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```
Look at the attributes
```{r}
attributes(keggres)
```
```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```
We can view these pathways with our geneset genes highlighted using the `pathvview()` function. E.g. for Asthma I will use the pathway.id hsa05310 as seen above.
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05310.pathview.png)



